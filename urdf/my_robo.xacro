<?xml version="1.0"?>
<robot name="my_robo"
  xmlns:xacro="http://ros.org/wiki/xacro">

  <xacro:property name="M_PI" value="3.14159274"/>

  <xacro:include filename="$(find se2c_rgbdw_slam)/urdf/imu.urdf.xacro" />
  <xacro:include filename="$(find se2c_rgbdw_slam)/urdf/color.urdf.xacro" />
  <xacro:include filename="$(find se2c_rgbdw_slam)/urdf/my_robo_laser.urdf.xacro" />
  <xacro:include filename="$(find se2c_rgbdw_slam)/urdf/my_robo_camera.urdf.xacro" />


  <!-- link -->
  <link name="base_footprint"/>

  <joint name="base_link_joint" type="fixed">
    <parent link="base_footprint"/>
    <child link="base_link"/>
    <origin xyz="0 0 0.0925"/>
  </joint>


  <link name="base_link">
    <visual name = "base">
      <geometry>
        <box size="0.300 0.25 0.065"/>
      </geometry>
    </visual>

    <visual name="body">
      <geometry>
        <box size="0.200 0.200 0.300"/>
      </geometry>
      <origin xyz="-0.05 0 0.1825" rpy="0 0 0"/>
    </visual>

    <visual name="top">
      <geometry>
        <box size="0.080 0.165 0.100"/>
      </geometry>
      <origin xyz="-0.055 0 0.3825" rpy="0 0 0"/>
    </visual>

    <visual name="front_caster_assist">
      <geometry>
        <box size="0.02 0.02 0.04"/>
      </geometry>
      <origin xyz="0.130 0 -0.0525"/>
    </visual>


    <visual name="back_caster_assist">
      <geometry>
        <box size="0.02 0.02 0.04"/>
      </geometry>
      <origin xyz="-0.130 0 -0.0525"/>
    </visual>


    <collision nane = "base">
      <geometry>
        <box size="0.300 0.250 0.065"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
    </collision>

    <collision nane = "body">
      <geometry>
        <box size="0.200 0.250 0.4"/>
      </geometry>
      <origin xyz="-0.05 0 0.2325" rpy="0 0 0"/>
    </collision>

    <collision nane = "bottom">
      <geometry>
        <box size="0.300 0.250 0.05"/>
      </geometry>
      <origin xyz="0 0 -0.0575" rpy="0 0 0"/>
    </collision>

    <inertial>
      <origin xyz="-0.05 0 0.0575"/>
      <mass value="5.800"/>
      <!--battery1.6kg, mainRobot 5.8kg wheel 0.3kgx2 -->
      <!--calculated as collision cuboid  -->
      <inertia ixx="0.1735275" ixy="0" ixz="0" iyy="0.1579442" iyz="0" izz="0.08641667"/>
    </inertial>
    <!-- for Solid cuboid of width w, height h, depth d, and mass m , ixx=(m(h^2+d^2))/12 iyy=(m(w^2+d^2))/12 izz=(m(w^2+h^2))/12-->
  </link>


  <joint name="left_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="left_wheel_link"/>
    <origin rpy="-1.5707 0 0" xyz="0 0.1425 -0.0175"/>
    <axis xyz="0 0 1"/>
    <limit velocity="1.0" effort="2.0"/>
    <!--decide mortor power-->
    <dynamics damping="0.2"/>
    <!--damping of axes of mortor-->
  </joint>

  <link name="left_wheel_link">
    <visual>
      <geometry>
        <cylinder radius="0.075" length="0.03"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <material name="black"/>
    </visual>

    <collision>
      <geometry>
        <cylinder radius="0.075" length="0.03"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.300"/>
      <inertia ixx="0.0004525" ixy="0" ixz="0" iyy="0.0004525" iyz="0" izz="0.00084375"/>
    </inertial>

    <!--for Solid cylinder of radius r, height h and mass m , ixx=(m(3r^2+h^2))/12 iyy=(m(3r^2+h^2))/12 izz=(mr^2)/2-->

  </link>



  <joint name="right_wheel_joint" type="continuous">
    <parent link="base_link"/>
    <child link="right_wheel_link"/>
    <origin rpy="1.5707 0 0" xyz="0 -0.1425 -0.0175"/>
    <axis xyz="0 0 -1"/>
    <limit velocity="1.0" effort="2.0"/>
    <dynamics damping="0.2"/>
  </joint>

  <link name="right_wheel_link">
    <visual>
      <geometry>
        <cylinder radius="0.075" length="0.03"/>
      </geometry>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <material name="black"/>
    </visual>

    <collision>
      <geometry>
        <cylinder radius="0.075" length="0.03"/>
      </geometry>
    </collision>

    <inertial>
      <origin xyz="0 0 0"/>
      <mass value="0.300"/>
      <inertia ixx="0.0004525" ixy="0" ixz="0" iyy="0.0004525" iyz="0" izz="0.00084375"/>
    </inertial>

  </link>


  <!--caster -->
  <xacro:macro name="caster_macro" params="parent">
    <!-- caster-->
    <!--front caster-->
    <joint name="front_caster_joint" type="fixed">
      <!--  <parent link="front_caster_assist_link"/>-->
      <parent link="base_link"/>
      <child link="front_caster"/>
      <!-- <origin xyz="0 0 -0.02"/> -->
      <origin xyz="0.130 0 -0.072"/>
    </joint>

    <link name="front_caster">
      <visual>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
        <material name="green">
          <color rgba="0 1 0 1"/>
        </material>
      </visual>

      <collision>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
      </collision>
    </link>

    <!--back caster-->
    <joint name="back_caster_joint" type="fixed">
      <!--   <parent link="back_caster_assist_link"/>-->
      <parent link="base_link"/>
      <child link="back_caster"/>
      <!--   <origin xyz="0 0 -0.02"/> -->
      <origin xyz="-0.130 0 -0.071"/>
    </joint>

    <link name="back_caster">
      <visual>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
        <material name="green">
          <color rgba="0 1 0 1"/>
        </material>
      </visual>

      <collision>
        <geometry>
          <sphere radius="0.02"/>
        </geometry>
      </collision>
    </link>

    <!-- end caster-->
  </xacro:macro>
  <xacro:caster_macro parent="caster_assist_link"/>




  <!-- ===============  Transmission =============== -->
  <transmission name="left_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="left_wheel_joint">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="left_wheel_motor">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>

  <transmission name="right_wheel_trans">
    <type>transmission_interface/SimpleTransmission</type>
    <joint name="right_wheel_joint">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
    </joint>
    <actuator name="right_wheel_motor">
      <hardwareInterface>hardware_interface/VelocityJointInterface</hardwareInterface>
      <mechanicalReduction>1</mechanicalReduction>
    </actuator>
  </transmission>


  <gazebo>
    <!--
    <plugin name="gazebo_ros_control" filename="libgazebo_ros_control.so">
      <robotNamespace>my_robo</robotNamespace>
  <robotSimType>gazebo_ros_control/DefaultRobotHWSim</robotSimType>
    <legacyModeNS>true</legacyModeNS>
    </plugin>
</gazebo>

<gazebo>

    <plugin name="joint_state_publisher" filename="libgazebo_ros_joint_state_publisher.so">
      <jointName>base_link_joint,front_caster_assist_joint,front_caster_joint,back_caster_assist_joint, back_caster_joint</jointName>
        <updateRate>10</updateRate>
    </plugin>
-->

    <!-- http://docs.ros.org/jade/api/gazebo_plugins/html/gazebo__ros__diff__drive_8cpp_source.html-->
    <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive.so">
    <!-- <plugin name="differential_drive_controller" filename="libgazebo_ros_diff_drive_noise.so"> -->
      <leftJoint>left_wheel_joint</leftJoint>
      <rightJoint>right_wheel_joint</rightJoint>

      <wheelSeparation>0.285</wheelSeparation>
      <wheelDiameter>0.15</wheelDiameter>
      <updateRate>30</updateRate>
      <wheelAcceleration>1</wheelAcceleration>
      <wheelTorque>10</wheelTorque>


      <commandTopic>cmd_vel</commandTopic>
      <odometryTopic>odom</odometryTopic>
      <odometryFrame>odom</odometryFrame>
      <!-- <robotBaseFrame>base_link</robotBaseFrame> -->
      <robotBaseFrame>base_footprint</robotBaseFrame>

      <odometrySource>world</odometrySource>
      <!-- <odometrySource>encoder</odometrySource> -->
      <publishOdomTF>true</publishOdomTF>
      <publishWheelTF>false</publishWheelTF>
      <publishTf>true</publishTf>
      <publishWheelJointState>true</publishWheelJointState>
      <legacyMode>false</legacyMode>

      <rosDebugLevel>na</rosDebugLevel>

      <publishEncoderMeasurement>true</publishEncoderMeasurement>
      <!-- <encoderPulseConterPerMeter></encoderPulseConterPerMeter> -->
      <!-- <encoderPulseConterInterCept></encoderPulseConterInterCept> -->
      <encoderTopic>encoder</encoderTopic>

    </plugin>

  </gazebo>


  <gazebo reference="base_link">
    <selfCollide>true</selfCollide>
    <mu1 value="0.5" />
    <mu2 value="0.5" />
  </gazebo>

  <gazebo reference="left_wheel_link">
    <selfCollide>true</selfCollide>
    <mu1 value="infinity" />
    <mu2 value="infinity" />
    <kp>500000.0</kp>
    <kd>10.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.1</maxVel>
    <fdir1>1 0 0</fdir1>
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="right_wheel_link">
    <selfCollide>true</selfCollide>
    <mu1 value="infinity" />
    <mu2 value="infinity" />
    <kp>500000.0</kp>
    <kd>10.0</kd>
    <minDepth>0.001</minDepth>
    <maxVel>0.1</maxVel>
    <fdir1>1 0 0</fdir1>
    <material>Gazebo/Black</material>
  </gazebo>

  <gazebo reference="front_caster">
    <selfCollide>true</selfCollide>
    <mu1 value="0" />
    <mu2 value="0" />
    <material>Gazebo/Green</material>
  </gazebo>

  <gazebo reference="back_caster">
    <selfCollide>true</selfCollide>
    <mu1 value="0" />
    <mu2 value="0" />
    <material>Gazebo/Green</material>
  </gazebo>

  <gazebo reference="laser_link">
    <material>Gazebo/Blue</material>
  </gazebo>

  <gazebo reference="camera_link">
    <material>Gazebo/Blue</material>
  </gazebo>

</robot>
